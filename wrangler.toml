name = "edgefirst-dev-starter"

main = "./worker.ts"

# Update the compatibility date to the date you want to lock to
compatibility_date = "2024-10-11"

# This is needed for AsyncLocalStorage to work
compatibility_flags = ["nodejs_compat_v2"]

# Set the development port to be 3000
dev.port = 3000

# Enable serving static assets from the `./build/client` directory
assets = { directory = "./build/client" }

# Enables the Browser Rendering service
# To use it locally, update the ./scripts/dev.ts file and add `--remote` after 
# the `bun start` command
browser = { binding = "BROWSER" }

# To be able to use assets in your Worker, Smart placement needs to be off
[placement]
mode = "off"

# Enable Observability to get logs of your Worker
[observability]
enabled = true

# Configure your D1 database
[[d1_databases]]
binding = "DB"
database_name = "stack-db"
database_id = "e746a19d-d890-4321-9c30-5167828540a2"
migrations_dir = "./db/migrations"

# Configure your KV namespace
[[kv_namespaces]]
binding = "KV"
id = "1473f4ea43174ad5853a017f8fde1f37"

# Configure your R2 bucket
[[r2_buckets]]
binding = "FS"
bucket_name = "stack-blob"

# Configure this worker as a queue producer
[[queues.producers]]
queue = "edgefirst-queue"
binding = "QUEUE"

# Configure this worker as a queue consumer
[[queues.consumers]]
queue = "edgefirst-queue"
# The maximum number of messages allowed in each batch
max_batch_size = 10
# The maximum number of seconds to wait until a batch is full
max_batch_timeout = 30
# The maximum number of retries for a message
max_retries = 10
# The name of another Queue to send a message if it fails processing at least max_retries times, uncomment to enable it
# dead_letter_queue = "edgefirst-dead-letter-queue"

# Enables the Workers AI service
# Note that using AI on development can incur additional costs as it uses Worker
# cloud resources and not your local machine
[ai]
binding = "AI"

# Note that this will trigger your Worker every minute, increasing your request
# count and potentially incurring additional costs
[triggers]
crons = ["* * * * *"]

[vars]
APP_ENV = "development"

[env.production.vars]
APP_ENV = "production"
